/**
 * skylark-pox - A version of pox that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-pox/
 * @license MIT
 */
define(["./pox","./Vector"],function(e,t){const i={VRReady:!1,isPresenting:!1,WebXR:!1,checkVR:function(e){return new Promise((t,r)=>{navigator.xr?navigator.xr.isSessionSupported("immersive-vr").then(e=>{i.VRReady=e,i.WebXR=e,t(e)}).catch(e=>{console.log(e),t(!1)}):navigator.getVRDisplays?(void 0!=window.VRFrameData&&(i.vrFrame=new VRFrameData),navigator.getVRDisplays().then(r=>{console.log("VR init with WebVR"),i.vrDisplay=r[r.length-1],console.log(i.vrDisplay),i.VRReady=!0,window.addEventListener("vrdisplaypresentchange",()=>{console.log("vr presenting= "+i.vrDisplay.isPresenting),i.vrDisplay.isPresenting?(e.callEvent("vrchange",1),i.isPresenting=!0):(e.resize(),e.callEvent("vrchange",0),i.isPresenting=!1)},!1),window.addEventListener("vrdisplayactivate",()=>{console.log("vr active")},!1),window.addEventListener("vrdisplaydeactivate",()=>{console.log("vr deactive")},!1),t(!0)}).catch(e=>{r(e)})):t(!1)})},presentVR:function(e){return new Promise((t,r)=>{if(i.WebXR)navigator.xr.requestSession("immersive-vr").then(function(t){i.session=t,i.isPresenting=!0,console.log("vr start"),t.updateRenderState({baseLayer:new XRWebGLLayer(t,e.wwg.gl,{framebufferScaleFactor:e.pixRatio})}),t.requestReferenceSpace("local").then(t=>{i.referenceSpace=t,i.session.requestAnimationFrame(i.loopf),e.callEvent("vrchange",1)}),t.addEventListener("end",t=>{i.session=null,i.isPresenting=!1,console.log("VR end"),e.callEvent("vrchange",0)})});else if(i.vrDisplay){const t={source:e.can,attributes:{}};void 0!==e.pox.setting.highRefreshRate&&(t.attributes.highRefreshRate=e.pox.setting.highRefreshRate),void 0!==e.pox.setting.foveationLevel&&(t.attributes.foveationLevel=e.pox.setting.foveationLevel),i.vrDisplay.requestPresent([t]).then(()=>{console.log("present ok");const t=i.vrDisplay.getEyeParameters("left"),r=i.vrDisplay.getEyeParameters("right");e.can.width=2*Math.max(t.renderWidth,r.renderWidth),e.can.height=Math.max(t.renderHeight,r.renderHeight),"Oculus Go"==i.vrDisplay.displayName&&(e.can.width=2560,e.can.height=1280),e.can.width=e.can.width*e.pixRatio,e.can.height=e.can.height*e.pixRatio,e.pox.log(i.vrDisplay.displayName),e.pox.log("vr canvas:"+e.can.width+" x "+e.can.height)}).catch(e=>{console.log(e)})}})},closeVR:function(e){i.WebXR&&(console.log("vr closing"),i.isPresenting=!1,i.session.end()),i.vrDisplay&&i.vrDisplay.exitPresent().then(()=>{console.log("VR end")})},animationFrame:function(e,t,r){if(i.loopf=t,i.isPresenting){if(!r)return;i.WebXR?(i.session.requestAnimationFrame(t),i.vrFrame=r,e.isVR=!0):i.vrDisplay&&i.vrDisplay.isPresenting&&(e.loop=i.vrDisplay.requestAnimationFrame(t),e.isVR=!0)}else e.loop=window.requestAnimationFrame(t),e.isVR=!1},submitFrame:function(e){i.WebXR,i.vrDisplay&&i.vrDisplay.isPresenting&&i.vrDisplay.submitFrame()},getFrameData:function(e){if(i.WebXR&&i.vrFrame){let e=i.vrFrame.getViewerPose(i.referenceSpace);e.orientation=[e.transform.orientation.x,e.transform.orientation.y,e.transform.orientation.z,e.transform.orientation.w],e.position=[e.transform.position.x,e.transform.position.y,e.transform.position.z];let r={pose:e},n=i.session.renderState.baseLayer;i.webGLLayer=n;for(let i=0;i<=e.views.length-1;i++){var t=n.getViewport(e.views[i]);1==i?(r.rightViewMatrix=e.views[i].transform.inverse.matrix,r.rightProjectionMatrix=e.views[i].projectionMatrix,r.rightViewport=t):(r.leftViewMatrix=e.views[i].transform.inverse.matrix,r.leftProjectionMatrix=e.views[i].projectionMatrix,r.leftViewport=t)}return i.viewport={leftViewport:r.leftViewport,rightViewport:r.rightViewport},r}if(i.vrDisplay)return i.vrDisplay.getFrameData(i.vrFrame),i.vrFrame},getViewport:function(e){return i.WebXR&&i.isPresenting?i.viewport:{leftViewport:{x:0,y:0,width:e.width/2,height:e.height},rightViewport:{x:e.width/2,y:0,width:e.width/2,height:e.height}}},setDepth:function(e){i.isPresenting&&(i.WebXR&&i.session.updateRenderState({depthNear:e.camNear,depthFar:e.camFar}),i.vrDisplay&&(i.vrDisplay.depthNear=e.camNear,i.vrDisplay.depthFar=e.camFar))}};return e.Device=i});
//# sourceMappingURL=sourcemaps/Device.js.map
