{"version":3,"sources":["Device.js"],"names":["define","pox","Vector","Device","VRReady","isPresenting","WebXR","checkVR","poxp","Promise","resolve","reject","navigator","xr","isSessionSupported","then","supported","catch","err","console","log","getVRDisplays","undefined","window","VRFrameData","vrFrame","displays","vrDisplay","length","addEventListener","callEvent","resize","presentVR","requestSession","xrSession","session","updateRenderState","baseLayer","XRWebGLLayer","wwg","gl","framebufferScaleFactor","pixRatio","requestReferenceSpace","xrReferenceSpace","referenceSpace","requestAnimationFrame","loopf","ev","p","source","can","attributes","setting","highRefreshRate","foveationLevel","requestPresent","leftEye","getEyeParameters","rightEye","width","Math","max","renderWidth","height","renderHeight","displayName","closeVR","end","exitPresent","animationFrame","vrframe","isVR","loop","submitFrame","getFrameData","pose","getViewerPose","orientation","transform","x","y","z","w","position","frame","webGLLayer","renderState","i","views","viewport","getViewport","rightViewMatrix","inverse","matrix","rightProjectionMatrix","projectionMatrix","rightViewport","leftViewMatrix","leftProjectionMatrix","leftViewport","setDepth","camDepth","depthNear","camNear","depthFar","camFar"],"mappings":"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","file":"../Device.js","sourcesContent":["define([\n    \"./pox\",\n    \"./Vector\"\n],function(pox,Vector){\n\tconst Device = {\n\t\tVRReady:false,\n\t\tisPresenting:false,\n\t\tWebXR:false ,\n\t\tcheckVR:function(poxp) {\n\t\t\treturn new Promise( (resolve,reject)=>{\n\t\t\t\t// for WebXR\n\t\t\t\tif(navigator.xr) {\n\t\t\t\t\tnavigator.xr.isSessionSupported('immersive-vr').then((supported) => {\n\t\t\t\t\t\tDevice.VRReady = supported \n\t\t\t\t\t\tDevice.WebXR = supported \n\t\t\t\t\t\tresolve(supported)       \t\n\t\t\t\t\t}).catch((err)=>{\n\t\t\t\t\t\tconsole.log(err)\n\t\t\t\t\t\tresolve(false)\n\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t// for WebVR\n\t\t\t\tif(navigator.getVRDisplays) {\n\t\t\t\t\tif(window.VRFrameData!=undefined) Device.vrFrame = new VRFrameData()\n\t\t\t\t\tnavigator.getVRDisplays().then((displays)=> {\n\t\t\t\t\t\tconsole.log(\"VR init with WebVR\")\n\t\t\t\t\t\tDevice.vrDisplay = displays[displays.length - 1]\n\t\t\t\t\t\tconsole.log(Device.vrDisplay)\n\t\t\t\t\t\tDevice.VRReady = true \n\t//\t\t\t\t\tpoxp.vrDisplay = Device.vrDisplay\n\t\t\t\t\t\twindow.addEventListener('vrdisplaypresentchange', ()=>{\n\t\t\t\t\t\t\tconsole.log(\"vr presenting= \"+Device.vrDisplay.isPresenting)\n\t\t\t\t\t\t\tif(Device.vrDisplay.isPresenting) {\n\t\t\t\t\t\t\t\tpoxp.callEvent(\"vrchange\",1)\n\t\t\t\t\t\t\t\tDevice.isPresenting = true \n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpoxp.resize() ;\n\t\t\t\t\t\t\t\tpoxp.callEvent(\"vrchange\",0)\n\t\t\t\t\t\t\t\tDevice.isPresenting = false \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, false);\n\t\t\t\t\t\twindow.addEventListener('vrdisplayactivate', ()=>{\n\t\t\t\t\t\t\tconsole.log(\"vr active\")\n\t\t\t\t\t\t}, false);\n\t\t\t\t\t\twindow.addEventListener('vrdisplaydeactivate', ()=>{\n\t\t\t\t\t\t\tconsole.log(\"vr deactive\")\n\t\t\t\t\t\t}, false);\n\t\t\t\t\t\tresolve(true)\n\t\t\t\t\t}).catch((err)=> {\n\t\t\t\t\t\treject(err)\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tresolve(false)\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\tpresentVR:function(poxp) {\n\t\t\treturn new Promise( (resolve,reject)=>{\n\t\t\t\t// for WebXR\n\t\t\t\tif(Device.WebXR) {\n\t\t\t\t\tnavigator.xr.requestSession(\"immersive-vr\").then(function(xrSession) {\n\t\t\t\t\t\tDevice.session=xrSession\n\t\t\t\t\t\tDevice.isPresenting = true\n\t\t\t\t\t\tconsole.log(\"vr start\")\n\t\t\t\t\t\txrSession.updateRenderState({baseLayer: new XRWebGLLayer(xrSession,poxp.wwg.gl,{framebufferScaleFactor:poxp.pixRatio})});\n\t\t\t\t\t\txrSession.requestReferenceSpace(\"local\").then((xrReferenceSpace) => {\n\t\t\t\t\t\t\tDevice.referenceSpace=xrReferenceSpace;\n\t\t\t\t\t\t\tDevice.session.requestAnimationFrame(Device.loopf);\n\t\t\t\t\t\t\tpoxp.callEvent(\"vrchange\",1)\n\t\t\t\t\t\t});\n\t\t\t\t\t\txrSession.addEventListener(\"end\", (ev)=>{\n\t\t\t\t\t\t\t\tDevice.session=null\n\t\t\t\t\t\t\t\tDevice.isPresenting = false\n\t\t\t\t\t\t\t\tconsole.log(\"VR end\")\n\t//\t\t\t\t\t\t\tpoxp.loop = window.requestAnimationFrame(Device.loopf) ;\n\t\t\t\t\t\t\t\tpoxp.callEvent(\"vrchange\",0)\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t} else \n\t\t\t\t// for WebVR\n\t\t\t\tif(Device.vrDisplay) {\n\t\t\t\t\tconst p = { source: poxp.can,attributes:{} }\n\t\t\t\t\tif(poxp.pox.setting.highRefreshRate!==undefined) p.attributes.highRefreshRate = poxp.pox.setting.highRefreshRate\n\t\t\t\t\tif(poxp.pox.setting.foveationLevel!==undefined) p.attributes.foveationLevel = poxp.pox.setting.foveationLevel\n\t\t\t\t\tDevice.vrDisplay.requestPresent([p]).then( () =>{\n\t\t\t\t\t\tconsole.log(\"present ok\")\n\t\t\t\t\t\tconst leftEye = Device.vrDisplay.getEyeParameters(\"left\");\n\t\t\t\t\t\tconst rightEye = Device.vrDisplay.getEyeParameters(\"right\");\n\t\t\t\t\t\tpoxp.can.width = Math.max(leftEye.renderWidth, rightEye.renderWidth) * 2;\n\t\t\t\t\t\tpoxp.can.height = Math.max(leftEye.renderHeight, rightEye.renderHeight);\n\t\t\t\t\t\tif(Device.vrDisplay.displayName==\"Oculus Go\") {\n\t\t\t\t\t\t\tpoxp.can.width = 2560\n\t\t\t\t\t\t\tpoxp.can.height = 1280\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpoxp.can.width= poxp.can.width * poxp.pixRatio \n\t\t\t\t\t\tpoxp.can.height= poxp.can.height * poxp.pixRatio \n\t\t\t\t\t\tpoxp.pox.log(Device.vrDisplay.displayName)\n\t\t\t\t\t\tpoxp.pox.log(\"vr canvas:\"+poxp.can.width+\" x \"+poxp.can.height);\n\t\t\t\t\t}).catch((err)=> {\n\t\t\t\t\t\tconsole.log(err)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\tcloseVR:function(poxp) {\n\t\t\t// for WebXR\n\t\t\tif(Device.WebXR) {\n\t\t\t\tconsole.log(\"vr closing\")\n\t\t\t\tDevice.isPresenting = false\n\t\t\t\tDevice.session.end()\n\t\t\t}\n\t\t\t// for WebVR\n\t\t\tif(Device.vrDisplay) {\n\t\t\t\tDevice.vrDisplay.exitPresent().then( () =>{\n\t\t\t\t\tconsole.log(\"VR end\")\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tanimationFrame:function(poxp,loopf,vrframe) {\n\t\t\tDevice.loopf = loopf \n\t\t\tif(Device.isPresenting ) {\n\t\t\t\tif(!vrframe) return \n\t\t\t\t// for WebXR\n\t\t\t\tif(Device.WebXR) {\n\t\t\t\t\tDevice.session.requestAnimationFrame(loopf);\n\t\t\t\t\tDevice.vrFrame = vrframe \n\t\t\t\t\tpoxp.isVR = true \n\t//\t\t\t\tconsole.log(\"vrframe\")\n\t\t\t\t// for WebVR\n\t\t\t\t} else if(Device.vrDisplay && Device.vrDisplay.isPresenting) {\n\t\t\t\t\tpoxp.loop = Device.vrDisplay.requestAnimationFrame(loopf)\n\t\t\t\t\tpoxp.isVR = true \n\t\t\t\t}\n\t\t\t} else {\n\t//\t\t\tconsole.log(\"no vrframe\")\n\t\t\t\tpoxp.loop = window.requestAnimationFrame(loopf) ;\n\t\t\t\tpoxp.isVR = false ;\n\t\t\t}\n\t\t},\n\t\tsubmitFrame:function(poxp) {\n\t\t\t// for WebXR\n\t\t\tif(Device.WebXR) {\n\t\t\t}\n\t\t\t// for WebVR\n\t\t\tif(Device.vrDisplay) {\n\t\t\t\tif(Device.vrDisplay.isPresenting) Device.vrDisplay.submitFrame()\n\t\t\t}\n\t\t},\n\t\tgetFrameData:function(poxp) {\n\t\t\t// for WebXR\n\t\t\tif(Device.WebXR && Device.vrFrame) {\n\t//\t\t\tconsole.log(\"getframe\")\n\t\t\t\tlet pose=Device.vrFrame.getViewerPose(Device.referenceSpace);\n\t//\t\t\tconsole.log(pose)\n\t\t\t\tpose.orientation = [pose.transform.orientation.x,pose.transform.orientation.y,pose.transform.orientation.z,pose.transform.orientation.w]\n\t\t\t\tpose.position = [pose.transform.position.x,pose.transform.position.y,pose.transform.position.z]\n\t\t\t\tlet frame = {pose:pose}\n\t\t\t\tlet webGLLayer=Device.session.renderState.baseLayer;\n\t//\t\t\tconsole.log(webGLLayer)\n\t\t\t\tDevice.webGLLayer = webGLLayer\n\t\t\t\tfor (let i=0;i<=pose.views.length-1;i++)\n\t\t\t\t{\n\t\t\t\t\tvar viewport=webGLLayer.getViewport(pose.views[i]);\n\t\t\t\t\tif(i==1) {\n\t\t\t\t\t\tframe.rightViewMatrix = pose.views[i].transform.inverse.matrix\n\t\t\t\t\t\tframe.rightProjectionMatrix = pose.views[i].projectionMatrix\n\t\t\t\t\t\tframe.rightViewport = viewport \n\t\t\t\t\t} else {\n\t\t\t\t\t\tframe.leftViewMatrix = pose.views[i].transform.inverse.matrix\n\t\t\t\t\t\tframe.leftProjectionMatrix = pose.views[i].projectionMatrix\t\n\t\t\t\t\t\tframe.leftViewport = viewport \t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tDevice.viewport = {leftViewport:frame.leftViewport,rightViewport:frame.rightViewport}\n\t//\t\t\tconsole.log(frame)\n\t\t\t\treturn frame \n\t\t\t}\n\t\t\t// for WebVR\n\t\t\tif(Device.vrDisplay) {\n\t\t\t\tDevice.vrDisplay.getFrameData(Device.vrFrame)\n\t\t\t\treturn Device.vrFrame\n\t\t\t}\n\t\t},\n\t\tgetViewport:function(can) {\n\t\t\tif(Device.WebXR && Device.isPresenting)\n\t\t\t\treturn Device.viewport\n\t\t\telse \n\t\t\t\treturn {leftViewport:{x:0,y:0,width:can.width/2,height:can.height},\n\t\t\t\t\t\t\t\trightViewport:{x:can.width/2,y:0,width:can.width/2,height:can.height}}\n\t\t},\n\t\tsetDepth:function(camDepth) {\n\t\t\t// for WebXR\n\t\t\tif(!Device.isPresenting) return\n\t\t\tif(Device.WebXR) {\n\t\t\t\tDevice.session.updateRenderState({depthNear:camDepth.camNear, depthFar:camDepth.camFar})\n\t\t\t}\n\t\t\t// for WebVR\n\t\t\tif(Device.vrDisplay) {\n\t\t\t\tDevice.vrDisplay.depthNear = camDepth.camNear \n\t\t\t\tDevice.vrDisplay.depthFar = camDepth.camFar \n\t\t\t}\n\t\t}\n\t}\n\n\treturn pox.Device = Device;\n});"]}